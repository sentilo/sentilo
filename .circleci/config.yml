# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  github-maven-deploy: github-maven-deploy/github-maven-deploy@1.2.0

mvn-deploy-command: &mvn-deploy-command
  mvn-deploy-command: mvn clean deploy --settings .maven.xml -DskipTests=true -B -U -Possrh


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-sentilo:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:8.0-node
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build install
          command: mvn --settings .maven.xml clean install -DskipTests=true -Dgpg.skip -Dmaven.javadoc.skip=true -B -V
      # Then run your tests!
      - run:
          name: Run tests
          command: mvn test
      # Run cobertura
      - run:
          name: Run test coverage and publish to Coveralls
          command: mvn clean cobertura:cobertura coveralls:report -Pcircleci -DrepoToken=${COVERALLS_REPO_TOKEN}   
      # Store code in a workspace to share it with next job
      - persist_to_workspace:
          root: .
          paths:
            - .                              

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sentilo-main: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test-sentilo      
      - github-maven-deploy/deploy-as-is-version:
          requires:  
            - build-and-test-sentilo
          <<: *mvn-deploy-command  
